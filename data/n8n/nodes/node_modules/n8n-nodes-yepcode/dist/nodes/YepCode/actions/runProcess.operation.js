"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.description = void 0;
exports.execute = execute;
const n8n_workflow_1 = require("n8n-workflow");
const transport_1 = require("../transport");
const properties = [
    {
        displayName: 'Process',
        name: 'process',
        type: 'options',
        typeOptions: {
            searchable: true,
            loadOptionsMethod: 'getProcesses',
        },
        default: '',
        required: true,
        description: 'The YepCode process to run. Choose from the list, or specify an ID using an <a href="https://docs.n8n.io/code/expressions/">expression</a>.',
    },
    {
        displayName: 'Parameters',
        name: 'parameters',
        type: 'resourceMapper',
        default: {
            mappingMode: 'defineBelow',
            value: null,
        },
        typeOptions: {
            loadOptionsDependsOn: ['process'],
            resourceMapper: {
                valuesLabel: 'Parameters',
                resourceMapperMethod: 'getProcessFormSchema',
                mode: 'map',
                supportAutoMap: false,
                showTypeConversionOptions: false,
            },
        },
        description: 'Map input data to the process form',
    },
    {
        displayName: 'Show Advanced Options',
        name: 'showAdvanced',
        type: 'boolean',
        default: false,
    },
    {
        displayName: 'Version',
        name: 'version',
        type: 'options',
        typeOptions: {
            loadOptionsMethod: 'getProcessVersionAliases',
            loadOptionsDependsOn: ['process'],
        },
        displayOptions: {
            show: {
                showAdvanced: [true],
            },
        },
        default: '$CURRENT',
        description: 'Specify a version tag to run a particular published version of the process. Choose from the list, or specify an ID using an <a href="https://docs.n8n.io/code/expressions/">expression</a>.',
    },
    {
        displayName: 'Synchronous',
        name: 'synchronous',
        type: 'boolean',
        default: true,
        displayOptions: {
            show: {
                showAdvanced: [true],
            },
        },
        description: "Whether to wait for the execution to finish or not. If false, the execution result won't be available.",
    },
    {
        displayName: 'Initiated By',
        name: 'initiatedBy',
        type: 'string',
        displayOptions: {
            show: {
                showAdvanced: [true],
            },
        },
        default: '',
        description: 'A meta attribute to identify who initiated the execution',
    },
    {
        displayName: 'Comment',
        name: 'comment',
        type: 'string',
        displayOptions: {
            show: {
                showAdvanced: [true],
            },
        },
        default: '',
        description: 'A meta attribute to add a comments to the execution',
    },
];
const displayOptions = {
    show: {
        operation: ['run_process'],
    },
};
exports.description = (0, n8n_workflow_1.updateDisplayOptions)(displayOptions, properties);
async function execute(items) {
    const returnData = [];
    for (let i = 0; i < items.length; i++) {
        try {
            const processId = this.getNodeParameter('process', i);
            const parameters = this.getNodeParameter('parameters.value', i, []);
            const showAdvanced = this.getNodeParameter('showAdvanced', i);
            const version = showAdvanced ? this.getNodeParameter('version', i) : '$CURRENT';
            const versionOrAlias = version === '$CURRENT' ? '' : version;
            const synchronous = showAdvanced
                ? this.getNodeParameter('synchronous', i)
                : true;
            const comment = showAdvanced ? this.getNodeParameter('comment', i) : '';
            const initiatedBy = showAdvanced ? this.getNodeParameter('initiatedBy', i) : '';
            const headers = {};
            if (initiatedBy) {
                headers['Yep-Initiated-By'] = initiatedBy;
            }
            let result;
            if (!synchronous) {
                result = await transport_1.apiRequest.call(this, {
                    method: 'POST',
                    endpoint: `processes/${processId}/execute`,
                    headers,
                    body: {
                        parameters: JSON.stringify(parameters),
                        tag: versionOrAlias,
                        comment,
                    },
                });
            }
            else {
                result = await transport_1.apiRequest.call(this, {
                    method: 'POST',
                    endpoint: `processes/${processId}/execute-sync`,
                    headers,
                    body: {
                        parameters: JSON.stringify(parameters),
                        tag: versionOrAlias,
                        comment,
                    },
                });
            }
            returnData.push({ json: result });
        }
        catch (error) {
            if (this.continueOnFail()) {
                returnData.push({ json: { message: error.message, error }, pairedItem: { item: i } });
                continue;
            }
            else {
                throw error;
            }
        }
    }
    return returnData;
}
//# sourceMappingURL=runProcess.operation.js.map
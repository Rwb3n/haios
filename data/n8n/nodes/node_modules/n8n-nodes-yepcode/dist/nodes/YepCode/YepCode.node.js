"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.YepCode = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const methods_1 = require("./methods");
const runProcess = __importStar(require("./actions/runProcess.operation"));
const runCode = __importStar(require("./actions/runCode.operation"));
class YepCode {
    constructor() {
        this.description = {
            displayName: 'YepCode',
            name: 'yepCode',
            icon: 'file:yepcode.svg',
            group: ['output'],
            version: 1,
            description: 'YepCode lets you run full processes or dynamic scripts using Node.js or Python, with support for any NPM or PyPI dependency. All in a secure, sandboxed environment.',
            subtitle: '={{$parameter["operation"] + ": " + $parameter["process"]}}',
            defaults: {
                name: 'YepCode',
            },
            inputs: ["main"],
            outputs: ["main"],
            parameterPane: 'wide',
            usableAsTool: true,
            credentials: [
                {
                    name: 'yepCodeApi',
                    required: true,
                },
            ],
            properties: [
                {
                    displayName: 'Operation',
                    name: 'operation',
                    type: 'options',
                    noDataExpression: true,
                    options: [
                        {
                            name: 'Run Process',
                            value: 'run_process',
                            description: 'Move your complex business logic into yep code processes and trigger them from your workflows using dynamic input parameters it s the most flexible way to connect with your ap is and services using real code with zero dev ops overhead',
                            action: 'Run process',
                        },
                        {
                            name: 'Run Code',
                            value: 'run_code',
                            description: 'A lightweight, flexible way to execute Node.js or Python code on demand â€” directly from your workflows or AI agents. The run_code tool runs in secure cloud sandboxes with full support for NPM and PyPI dependencies (https://yepcode.io/docs/dependencies), access to secrets, APIs, and databases. Perfect for quick scripts, dynamic logic, or AI-generated code.',
                            action: 'Run code',
                        },
                    ],
                    default: 'run_process',
                },
                ...runProcess.description,
                ...runCode.description,
            ],
        };
        this.methods = { loadOptions: methods_1.loadOptions, resourceMapping: methods_1.resourceMapping };
    }
    async execute() {
        const items = this.getInputData();
        let returnData = [];
        const operation = this.getNodeParameter('operation', 0);
        switch (operation) {
            case 'run_process':
                returnData = await runProcess.execute.call(this, items);
                break;
            case 'run_code':
                returnData = await runCode.execute.call(this, items);
                break;
            default:
                throw new n8n_workflow_1.NodeOperationError(this.getNode(), `The operation "${operation}" is not supported!`);
        }
        return [returnData];
    }
}
exports.YepCode = YepCode;
//# sourceMappingURL=YepCode.node.js.map
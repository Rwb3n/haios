"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_API_HOST = void 0;
exports.getYepCodeCredentials = getYepCodeCredentials;
exports.obtainAccessToken = obtainAccessToken;
exports.apiRequest = apiRequest;
const base64Utils_1 = require("./base64Utils");
exports.DEFAULT_API_HOST = 'https://cloud.yepcode.io';
async function getYepCodeCredentials() {
    const yepCodeApiCredentials = await this.getCredentials('yepCodeApi');
    return {
        apiToken: yepCodeApiCredentials.apiToken.toString(),
        apiHost: yepCodeApiCredentials.apiHost
            ? yepCodeApiCredentials.apiHost.toString()
            : exports.DEFAULT_API_HOST,
    };
}
async function obtainAccessToken(apiHost, clientId, clientSecret) {
    try {
        const options = {
            method: 'POST',
            url: `${apiHost}/auth/realms/yepcode/protocol/openid-connect/token`,
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                authorization: `Basic ${(0, base64Utils_1.base64Encode)(`${clientId}:${clientSecret}`)}`,
            },
            body: 'grant_type=client_credentials',
        };
        const response = await this.helpers.httpRequest(options);
        return response.access_token;
    }
    catch (error) {
        throw new Error(`Authentication failed: ${error.message}`);
    }
}
async function apiRequest({ method = 'GET', endpoint, headers = {}, body, query = {}, }) {
    const { apiToken, apiHost } = await getYepCodeCredentials.call(this);
    const decodedToken = (0, base64Utils_1.base64Decode)(apiToken.substring(3));
    const [clientId, clientSecret] = decodedToken.split(':');
    if (!clientId || !clientSecret) {
        throw new Error('Invalid apiToken format: ' + apiToken);
    }
    let teamId;
    const match = clientId.match(/^sa-(.*)-[a-z0-9]{8}$/);
    if (match) {
        teamId = match[1];
    }
    if (!teamId) {
        throw new Error('Invalid clientId format: ' + clientId);
    }
    const accessToken = await obtainAccessToken.call(this, apiHost, clientId, clientSecret);
    const options = {
        method,
        url: `${apiHost}/api/${teamId}/rest/${endpoint}`,
        body,
        qs: query,
        headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${accessToken}`,
            ...headers,
        },
    };
    return await this.helpers.httpRequest(options);
}
//# sourceMappingURL=index.js.map
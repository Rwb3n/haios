name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  security-events: write
  actions: read

env:
  PYTHON_VERSION: "3.11"

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xdist flake8 black==23.11.0 isort mypy
    
    - name: Run linting
      run: |
        # Check code formatting
        black --check --diff src/
        # Check import sorting
        isort --check-only --diff src/
        # Check code style
        flake8 src/ --max-line-length=120 --extend-ignore=E203,W503,E402,F401,F841,W605,F811,E303,E501
    
    - name: Run type checking
      run: |
        mypy src/ --ignore-missing-imports --no-strict-optional
    
    - name: Run tests with coverage
      run: |
        pytest src/tests/ -v --cov=src --cov-report=xml --cov-report=term-missing --cov-fail-under=85
    
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  schema-validation:
    name: Schema Validation
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install jsonschema
    
    - name: Validate JSON schemas
      run: |
        python -c "
        import json
        import os
        from pathlib import Path
        from jsonschema import Draft7Validator
        
        # Find all schema files
        schema_files = list(Path('.').rglob('*.schema.json'))
        print(f'Found {len(schema_files)} schema files')
        
        for schema_file in schema_files:
            print(f'Validating {schema_file}')
            with open(schema_file) as f:
                schema = json.load(f)
            Draft7Validator.check_schema(schema)
            print(f'✓ {schema_file} is valid')
        "

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Run E2E tests
      run: |
        # Run the demo in dev-fast mode to ensure basic functionality
        timeout 30s python -m src --demo --mode dev-fast || true
        
        # Run specific E2E test scenarios (disable coverage for E2E tests)
        pytest src/tests/ -v -k "e2e" --tb=short --no-cov
    
    - name: Archive test artifacts
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-artifacts
        path: |
          core_scaffold/
          os_root/
          *.log

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run Bandit security scan
      run: |
        bandit -r src/ --exclude src/tests/ --skip B101,B110,B403,B404,B601,B603 -f json -o bandit-report.json || true
        bandit -r src/ --exclude src/tests/ --skip B101,B110,B403,B404,B601,B603 -f txt
    
    - name: Check for known vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
        safety check
    
    - name: Run Trivy filesystem scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-fs-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        exit-code: '0'  # Don't fail the build on vulnerabilities
    
    - name: Run Trivy config scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-config-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        exit-code: '0'  # Don't fail the build on vulnerabilities
    
    - name: Ensure config scan output file exists
      run: |
        if [ ! -f trivy-config-results.sarif ]; then
          echo "{}" > trivy-config-results.sarif
        fi
    
    - name: Upload Trivy scan results to GitHub Security tab
      if: ${{ always() && hashFiles('trivy-fs-results.sarif') != '' }}
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-fs-results.sarif'
        category: 'trivy-fs'
    
    - name: Upload Trivy config scan results to GitHub Security tab
      if: ${{ always() && hashFiles('trivy-config-results.sarif') != '' }}
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-config-results.sarif'
        category: 'trivy-config'
    
    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          trivy-fs-results.sarif
          trivy-config-results.sarif

  sbom:
    name: SBOM Generation & Diff
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate SBOM (CycloneDX JSON)
        uses: anchore/sbom-action@v1
        with:
          path: .
          output-file: sbom.json
          format: cyclonedx-json

      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ github.sha }}
          path: sbom.json

      - name: Compare SBOM against main branch (if available)
        if: github.event_name == 'pull_request'
        run: |
          git fetch origin main --depth=1 || true
          if [ -f sbom.json ]; then
            if git show origin/main:sbom.json > /tmp/sbom_main.json 2>/dev/null; then
              pip install --quiet cyclonedx-bom
              cyclonedx-bom diff --input-a /tmp/sbom_main.json --input-b sbom.json --fail-on-severity="none"
            else
              echo "No SBOM found on main branch – skipping diff."
            fi
          fi

  build-check:
    name: Build Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/ 